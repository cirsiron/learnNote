### 前端架构

- 1. 目录层面组织代码
    * 更高效的组织开发目录
        + 好的目录阻止方式，甚至可以替代那些复杂的代码组织框架
    * css/js/img要分开存放
        + 分开存放，往往不是处于技术的角度考虑，而是从团队协作和迭代的管理层面出发
- 2. 页面层次的组织架构
    * 模板
    * 子模板嵌套，抽离
- 3. 组件化和设计模似
    * 继承 
    * 划分命名空间，闭包
    * 组件化，使用require。js和sea。js完成最终的组件的组织和管理
    组件化开发注意事项：
        + html中的class命名注意保证唯一，否则就会有可能与引入到的页面css有冲突
            + 方法是：比如一个datapicker组件 ui-datapicker-components
            也可以使用less或者sass
- 4. 做前端架构需要想什么
    * 技术选型
    * 需求分解，模块的边界划分
     - 如何设计接口更加友好
    * 自动化的发布和快速迭代
    * 如何降低维护成本
        - 维护成本通常体现在架构的可扩展性和易用性
- 5. 前端优化
    * 优化和扩展
        - 代码层面
            + 代码规范，codeReview
        - 架构层面
            + 可扩展性是否受到制约，
             + 可以评估产品需求和改动能不能快速上线
        - 协议层面
            + 通过http协议优化
        - 综合
            + 优化往往是技术的综合
- 6. 前端自动化
    * 前端自动化基础
    * 自动化的方向
        + 发布测试开发
